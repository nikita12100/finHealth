use teloxide::Bot;
use teloxide::dispatching::dialogue::GetChatId;
use teloxide::payloads::SendMessageSetters;
use teloxide::prelude::{CallbackQuery, Requester};
use crate::{get_or_create_portfolio, goto_start, invalid_input_for_callback, HandlerResult, MyDialogue, State};
use crate::buttons::account::set_location::ButtonLocation;
use crate::buttons::account::set_type::ButtonType;
use crate::buttons::set_currency::ButtonCurrency;
use crate::db::database::db_account::DataBaseAccount;
use crate::utils::common::make_keyboard_string;

pub struct EditAccountButton;

impl EditAccountButton {
    pub const INCOME_AMOUNT: &'static str = "üìà –í–Ω–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥";
    pub const OUTCOME_AMOUNT: &'static str = "üìâ –í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥";
    pub const SET_CURRENCY: &'static str = "–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É —Å—á–µ—Ç–∞";
    pub const SET_LOCATION: &'static str = "–ò–∑–º–µ–Ω–∏—Ç—å ??–ª–æ–∫–∞—Ü–∏—é??";
    pub const SET_TYPE: &'static str = "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Å—á–µ—Ç–∞";
    pub const REMOVE_BALANCE: &'static str = "–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–∞–ª–∞–Ω—Å";

    pub const VALUES: &'static [&'static str; 6] = &[
        Self::INCOME_AMOUNT,
        Self::OUTCOME_AMOUNT,
        Self::SET_CURRENCY,
        Self::SET_LOCATION,
        Self::SET_TYPE,
        Self::REMOVE_BALANCE,
    ];
}

pub async fn handler_update_account_btn(bot: Bot, dialogue: MyDialogue, account_name: String, q: CallbackQuery) -> HandlerResult {
    bot.answer_callback_query(&q.id).await?;
    let chat_id = q.chat_id().unwrap();

    let portfolio = get_or_create_portfolio(chat_id);
    match q.data.clone().unwrap().as_str() {
        EditAccountButton::INCOME_AMOUNT => {
            bot.edit_message_text(chat_id, q.message.clone().unwrap().id(), "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:").await?;

            dialogue.update(State::ListenAccountIncomeFor(account_name)).await?;
        }
        EditAccountButton::OUTCOME_AMOUNT => {
            bot.edit_message_text(chat_id, q.message.clone().unwrap().id(), "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:").await?;

            dialogue.update(State::ListenAccountOutcomeFor(account_name)).await?;
        }
        EditAccountButton::SET_CURRENCY => {
            let current_currency = portfolio.get_account(&*account_name).unwrap().get_currency().clone();
            bot.edit_message_text(chat_id, q.message.clone().unwrap().id(), format!("–¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞ —Å—á–µ—Ç–∞ {}", current_currency.to_string())).await?;

            dialogue.update(State::ListenCurrencyForAccountCallback(account_name)).await?;
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É").reply_markup(make_keyboard_string(1, ButtonCurrency::get_currencies())).await?;
        }
        EditAccountButton::SET_LOCATION => {
            let current_location = portfolio.get_account(&*account_name).unwrap().get_location().clone();
            bot.edit_message_text(chat_id, q.message.clone().unwrap().id(), format!("–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è —Å—á–µ—Ç–∞ {}", current_location.to_string())).await?;

            dialogue.update(State::ListenLocationForCallback(account_name)).await?;
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é").reply_markup(make_keyboard_string(1, ButtonLocation::get_locations())).await?;
        }
        EditAccountButton::SET_TYPE => {
            let current_type = portfolio.get_account(&*account_name).unwrap().get_type().clone();

            bot.edit_message_text(chat_id, q.message.clone().unwrap().id(), format!("–¢–µ–∫—É—â–∏–π —Ç–∏–ø —Å—á–µ—Ç–∞ {}", current_type.to_string())).await?;

            dialogue.update(State::ListenTypeForCallback(account_name)).await?;
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø").reply_markup(make_keyboard_string(1, ButtonType::get_types())).await?;
        }
        EditAccountButton::REMOVE_BALANCE => {
            bot.edit_message_text(chat_id, q.message.clone().unwrap().id(), "–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—á–µ—Ç").await?;
            let account = portfolio.get_account(&*account_name).unwrap();
            account.delete()?;

            bot.send_message(chat_id, format!("–ë–∞–ª–∞–Ω—Å {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", account.get_name())).await?;
            goto_start(bot, dialogue, chat_id, None).await?;
        }
        _ => {
            invalid_input_for_callback(bot, dialogue, q, format!("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ {:?}", EditAccountButton::VALUES.to_vec())).await?;
        }
    }

    Ok(())
}
